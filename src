
:-consult('data.pl').

% Define customer, order, item, alternative, and boycott_company predicates

% Question 1: List all orders of a specific customer
list_orders(CustUserName, Orders) :-
	customer(CustID, CustUserName),
	list_orders_helper(CustID, [], Orders).

list_orders_helper(CustID, Acc, Orders) :-
	order(CustID, OrderID, Items),
	Order = order(CustID, OrderID, Items),
	\+ is_member(Order, Acc),
	!,
	list_orders_helper(CustID, [Order|Acc], Orders).

list_orders_helper(_, Orders, Orders).

is_member(Item, [Item|_]).
is_member(Item, [_|Tail]) :-
	is_member(Item, Tail).


%2nd query:  Get the number of orders of a specific customer given customer id.

customerIdByUsername(Username, CustID) :-       
    customer(CustID, Username).

countOrdersOfCustomer(UName, Count) :-
    customerIdByUsername(UName, CustID),  % Get the customer ID
    countOrdersOfCustomerHelper(CustID, 1, Count).  % Start counting orders from 1

countOrdersOfCustomerHelper(CustID, OrderID, Count) :-
    order(CustID, OrderID, _),        % Check if there's an order for this customer with the current OrderID
    NextOrderID is OrderID + 1,       % Move to the next order ID
    countOrdersOfCustomerHelper(CustID, NextOrderID, TempCount), % Recursive call with the next order ID
    Count is TempCount + 1.           % Increment count for each order

countOrdersOfCustomerHelper(_, _, 0). % Base case: Stop recursion when there are no more orders


%3rd query:       List all items in a specific customer order given customer id and order id.

getItemsInOrderById(CustomerName, OrderID, Items) :-
    customer(CustomerID, CustomerName),
    order(CustomerID, OrderID, Items).


% task 4
count_items([], 0).

count_items([_|Tail], Count) :-
    count_items(Tail, TailCount),
    Count is TailCount + 1.

getNumOfItems(CustomerName, OrderID, Count) :-
    getItemsInOrderById(CustomerName, OrderID, Items),
    count_items(Items, Count).


%5th query:    Calculate the price of a given order given Customer Name and order id

getSingleItemPrice(ItemName,_,Price):-
	item(ItemName,_,Price).

totalFees([], 0). % Base case: Total fees of an empty list is 0
totalFees([Item|Rest], Total) :-
    totalFees(Rest, RestTotal),             % Calculate the total fees of the rest of the items
    getSingleItemPrice(Item, _, Price),     % Get the price of the current item
    Total is RestTotal + Price.             % Calculate the total fees by adding the price of the current item

gettingCustId(CId,CN):-
	customer(CId, CN).

calcPriceOfOrder(UName,OId,TotalPrice):-
	gettingCustId(CId,UName),
	order(CId,OId,Items),
	totalFees(Items,TotalPrice).



%6th query:    Given the item name or company name, determine whether we need to boycott or not.
 
isBoycott(ItemName) :-
    (   item(ItemName, CompanyName, _),
        boycott_company(CompanyName, _)
    ;   alternative(ItemName, _)
    ).



%7th query:     Given the company name or an item name, find the justification why you need to boycott this company/item.

getCompanyName(ItemName, CName):-     % Given the item name, get its company name
    item(ItemName, CName, _).

getJustification(CName, Just):-       % Given the company name, get its justification to boycott
    boycott_company(CName, Just).

whyToBoycott(ItemOrCompanyName, Justification):-
    item(ItemOrCompanyName, _, _),         % Check if ItemOrCompanyName is an item name
    getCompanyName(ItemOrCompanyName, CName),  % Get the company name for the item
    getJustification(CName, Justification).     % Get the justification for boycotting the company

whyToBoycott(ItemOrCompanyName, Justification):-
    \+ item(ItemOrCompanyName, _, _),    % Check if ItemOrCompanyName is not an item name
    getJustification(ItemOrCompanyName, Justification). % Get the justification for boycotting the company directly


% Question 8: Remove boycott items from an order:    Given an username and order ID, remove all the boycott items from this order.
removeBoycottItemsFromAnOrder(Customer, OrderID, NewList) :-
    customer(CustomerID, Customer),
    order(CustomerID, OrderID, Items),
    removeBoycottItems(Items, NewList).

removeBoycottItems([], []).
removeBoycottItems([Item|Rest], [Item|Filtered]) :-
    \+ boycott_item(Item),
    removeBoycottItems(Rest, Filtered).
removeBoycottItems([Item|Rest], Filtered) :-
    boycott_item(Item),
    removeBoycottItems(Rest, Filtered).

boycott_item(Item) :-
    alternative(Item, _).


%9th query:
:- discontiguous replaceBoycottItems/2.

replaceBoycottItemsFromAnOrder(CustomerName, OrderID, NewList) :-
    getItemsInOrderById(CustomerName, OrderID, OldList),
    replaceBoycottItems(OldList, NewList).

replaceBoycottItems([], []).
replaceBoycottItems([Item|Rest], [Item|NewRest]) :-
    \+ isBoycott(Item),
    replaceBoycottItems(Rest, NewRest).
    
replaceBoycottItems([BoycottItem|Rest], [Alternative|NewRest]) :-
    isBoycott(BoycottItem),
    alternative(BoycottItem, Alternative),
    replaceBoycottItems(Rest, NewRest).







% Question 10: Calculate the price of an order after replacing boycott item.


calcPriceAfterReplacingBoycottItemsFromAnOrder(Username, OrderID, NewList, TotalPrice) :-
    customer(CustomerID, Username),
    order(CustomerID, OrderID, OrderList),
    replaceBoycottItems(OrderList, NewList),
    calculateTotalPrice(NewList, TotalPrice).

replaceBoycottItems([], []).
replaceBoycottItems([Item|Rest], [Replacement|NewRest]) :-
    (alternative(Item, Replacement) ; \+ boycott_item(Item), Replacement = Item),
    replaceBoycottItems(Rest, NewRest).

calculateTotalPrice([], 0).
calculateTotalPrice([Item|Rest], Total) :-
    item(Item, _, Price),
    calculateTotalPrice(Rest, RestTotal),
    Total is RestTotal + Price.




%11th query:    calculate the difference in price between the boycott item and its alternative. 

getTheDifferenceInPriceBetweenItemAndAlternative(ItemName, AlternativeItem, DiffPrice) :-
   alternative(ItemName, AlternativeItem),
    item(ItemName, _, PriceItem),
    item(AlternativeItem, _, PriceAlt),
    DiffPrice is PriceAlt - PriceItem.



:- dynamic boycott_company/2,alternative/2,item/3. % Declare dynamic predicates


%12th query:   BONUS: Insert/Remove (1)item, (2)alternative and (3)new boycott company to/from the knowledge base. Hint: use assert to insert new fact and retract to remove a fact


add_item(IName, CName, IPrice):-
	assert(item(IName, CName, IPrice)).

remove_item(IName, CName, IPrice):-
	retract(item(IName, CName, IPrice)).

add_boycott_company(CName,Just):-
	assert(boycott_company(CName, Just)).

add_alternative(ItemName,AlternativeItem):-
	assert(alternative(ItemName,AlternativeItem)).
	







